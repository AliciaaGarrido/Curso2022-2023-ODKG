# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10S22hQOkZbsHmABhcJTzB2FzNTzdwaNB

**Task 07: Querying RDF(s)**
"""

github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
from rdflib.plugins.sparql import prepareQuery
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**"""

# TO DO
ns = Namespace("http://somewhere#")

# RDFLib
for s,p,o in g.triples((None, RDFS.subClassOf, ns.Person)):
  print(s)

# SPARQL
q1 = prepareQuery('''
  SELECT ?s WHERE { 
    ?s RDFS:subClassOf* ns:Person. 
  }
  ''',
  initNs = { "ns": ns, "RDFS": RDFS}
)

for r in g.query(q1):
 print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
# RDFLib                                                 need subclass instances
for s,p,o in g.triples((None, RDF.type , ns.Person)):
  print(s) 
for s,p,o in g.triples((None, RDFS.subClassOf, ns.Person)):
  for ss, pp, oo in g.triples((None, RDF.type, s)):
    print(ss)

#SPARQL
q2 = prepareQuery('''
  SELECT ?s WHERE { 
    {
      ?s a ns:Person. 
    } UNION {
      ?ss RDFS:subClassOf* ns:Person.
      ?s a ?ss
    }
  }
  ''',
  initNs = { "ns": ns, "RDFS": RDFS}
)
for r in g.query(q2):
 print(r)
# Visualize the results

"""**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**

"""

# TO DO
#RDFLib
for s,p,o in g.triples((None, RDF.type, ns.Person)):
  for ss,pp,oo in g.triples((s, None, None)):
    print(s, pp, oo)
for s,p,o in g.triples((None, RDFS.subClassOf, ns.Person)):
  for ss,pp,oo in g.triples((None, RDF.type, s)):
    for sss,ppp,ooo in g.triples((ss, None, None)):
      print(sss, ppp, ooo)

#SPARQL
q3 = prepareQuery('''
  SELECT ?s ?p ?o WHERE { 
    {
      ?s a ns:Person. 
      ?s ?p ?o
    } UNION {
      ?ss RDFS:subClassOf* ns:Person.
      ?s a ?ss.
      ?s ?p ?o
    }
  }
  ''',
  initNs = { "ns": ns, "RDFS": RDFS}
)
for r in g.query(q3):
 print(r)
# Visualize the results