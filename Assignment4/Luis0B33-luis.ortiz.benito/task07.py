# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X4k26Zjcqcif1VZECSRLuKxqaiJuqaiy

**Task 07: Querying RDF(s)**
"""

!pip install rdflib 
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**"""

# Done
from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")

query1 = prepareQuery("""
  SELECT ?subclass WHERE{
    ?subclass RDFS:subClassOf ns:Person.
  }
  """, initNs = {
      "ns":ns,
      "RDFS":RDFS
  }

)
# Visualize the results
for r in g.query(query1):
  print(r.subclass)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

#DONE
query2 = prepareQuery("""
  SELECT ?person WHERE{
    {
      ?person a ns:Person.
    } UNION {
      ?subclass RDFS:subClassOf ns:Person.
      ?person a ?subclass.
    }
  }
  """, initNs = {
      "ns":ns,
      "RDFS":RDFS
  }
)

# Visualize the results
for r in g.query(query2):
  print(r.person)

"""**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**

"""

#DONE
query3 = prepareQuery("""
  SELECT ?subclass ?person ?property  WHERE{
    {
      ?person a ns:Person.
    } UNION {
      ?subclass RDFS:subClassOf ns:Person.
    }
    ?person a ?subclass.
    ?person ?property ?value.
  }
  """, initNs = {
      "ns":ns,
      "RDFS":RDFS
  }
)

# Visualize the results
for r in g.query(query3):
  print(r.subclass, r.person, r.property)