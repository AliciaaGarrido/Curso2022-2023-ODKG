# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b0-gkmaR00INat40sfxw963ijTZqiehW

**Task 07: Querying RDF(s)**
"""

!pip install rdflib 
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
ns=Namespace("http://somewhere#")
VCARD=Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")
g.namespace_manager.bind('ns', ns, override=False)
g.namespace_manager.bind('vcard', VCARD, override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**"""

# TO DO
# Visualize the results (RDFLib)
for s,p,o in g.triples((None, RDFS.subClassOf, ns.Person)):
  print(s)

# SPARQL
from rdflib.plugins.sparql import prepareQuery

q1 = prepareQuery('''
  SELECT ?Subject WHERE { 
    ?Subject rdfs:subClassOf ns:Person. 
  }
  ''',
  initNs = { "ns": ns}
)

for r in g.query(q1):
  print(r.Subject)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
# Visualize the results (RDFLib)
for people1,p,o in g.triples((None, RDF.type, ns.Person)):
  print(people1)

for subclasses,p,o in g.triples((None, RDFS.subClassOf, ns.Person)):
  for people2,p,o in g.triples((None, RDF.type, subclasses)):
    print(people2)

# SPARQL

q2 = prepareQuery('''
SELECT ?people
WHERE { 
  { ?people a ns:Person 
  } 
  UNION
{ ?subclasses rdfs:subClassOf ns:Person.
  ?people a ?subclasses
 } 
}
  ''',
  initNs = { "ns": ns}
)


for r in g.query(q2):
  print(r.people)

"""**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**

"""

# TO DO
# Visualize the results

for people1,p,o in g.triples((None, RDF.type, ns.Person)):
  for people1,rel,val in g.triples((people1, None, None)):
    print(people1,rel)

for subclasses,r,c in g.triples((None, RDFS.subClassOf, ns.Person)):
  for people2,p_2,o_2 in g.triples((None, RDF.type, subclasses)):
    for people2,rel_2,val_2 in g.triples((people2, None, None)):
      print(people2,rel_2)

# SPARQL

q3 = prepareQuery('''
SELECT ?people ?properties
WHERE { 
  { ?people a ns:Person. 
    ?people ?properties ?values
  } 
  UNION
{ ?subclasses rdfs:subClassOf ns:Person.
  ?people a ?subclasses.
  ?people ?properties ?values
 } 
}
  ''',
  initNs = { "ns": ns}
)

for r in g.query(q3):
  print(r.people, r.properties)