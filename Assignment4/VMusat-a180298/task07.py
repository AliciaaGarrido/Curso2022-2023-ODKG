"""Task07.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1tV5j-DRcpPtoJGoMj8v2DSqR_9wyXeiE
**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2020-2021/master/Assignment4"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/resources/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**"""

VCARD = 'http://www.w3.org/2001/vcard-rdf/3.0#'
ns = Namespace("http://somewhere#")

for s, p, o in g.triples((None, RDFS.subClassOf, ns.Person)):
    print(s, p, o)

from rdflib.plugins.sparql import prepareQuery

q1 = '''
    SELECT DISTINCT ?sub WHERE
    { ?sub rdfs:subClassOf* ns:Person }
    LIMIT 10
    '''
query1 = prepareQuery(q1, initNs={"ns": ns, 'rdfs': RDFS})

for res in g.query(query1):
    print(res)


"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**"""

for s, p, o in g.triples((None, RDFS.subClassOf, ns.Person)):
    for a, b, c in g.triples((None, RDF.type, s)):
        print(a)
for s, p, o in g.triples((None, RDF.type, ns.Person)):
    print(s)

q2 = '''
    SELECT DISTINCT ?per WHERE {
         {?per rdf:type ns:Person .}
         UNION {
            ?sub rdfs:subClassOf* ns:Person .
            ?per rdf:type ?sub
            }
         }     
    LIMIT 10
    '''
query2 = prepareQuery(q2, initNs={"ns": ns, 'rdfs': RDFS, 'rdf': RDF})

for res in g.query(query2):
    print(res)


"""**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**"""

for s, p, o in g.triples((None, RDFS.subClassOf, ns.Person)):
    for a, b, c in g.triples((None, RDF.type, s)):
        for d, e, f in g.triples((a, None, None)):
            print(d, e, f)
for s, p, o in g.triples((None, RDF.type, ns.Person)):
    for a, b, c in g.triples((s, None, None)):
        print(a, b, c)

q3 = '''
    SELECT DISTINCT ?per ?prop ?class WHERE {
         {?per rdf:type ns:Person .
          ?per ?prop ?class}
         UNION {
            ?per ?prop ?class .
            ?sub rdfs:subClassOf ns:Person .
            ?per rdf:type ?sub 
            }
         }     
    LIMIT 50
    '''
query3 = prepareQuery(q3, initNs={"ns": ns, 'rdfs': RDFS, 'rdf': RDF})

for res in g.query(query3):
    print(res)
