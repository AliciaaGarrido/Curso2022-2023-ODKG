# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_oMtKmhcXzT4Cxy_NzuAB5KXvK4jDnlC

**Task 07: Querying RDF(s)**
"""

!pip install rdflib 
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**"""

#SPARQL
# TO DO
from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")

q1 = prepareQuery('''
  SELECT ?Subject WHERE { 
    ?Subject RDFS:subClassOf+ ns:Person .
  }
  ''',
  initNs = { "RDFS": RDFS,
            "ns":ns
            }
)

# Visualize the results
for r in g.query(q1):
  print(r.Subject)

# RDFLib
# TO DO


def recursiveSubClass(currentClass):
    for s, p, o in g.triples((None, RDFS.subClassOf, currentClass)):
      print(s)
      recursiveSubClass(s)

# Visualize the results

recursiveSubClass(ns.Person)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")

q1 = prepareQuery('''
  SELECT ?Subject WHERE { 
    ?classSubClass RDFS:subClassOf* ns:Person.
    ?Subject a ?classSubClass

  }
  ''',
  initNs = { "RDF": RDF,
            "ns" : ns,
            "RDFS" : RDFS
            })


# Visualize the results

for r in g.query(q1):
  print(r.Subject)

# RDFLib
# TO DO


def recursivePerson(currentClass):
    for s, p, o in g.triples((None, RDF.type, currentClass)):
      print(s)
    for s, p, o in g.triples((None, RDFS.subClassOf, currentClass)):
      recursivePerson(s)

# Visualize the results

recursivePerson(ns.Person)

"""**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**

"""

# TO DO

from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")


q1 = prepareQuery('''
  SELECT ?Subject ?O ?Value WHERE { 
    ?classSubClass RDFS:subClassOf* ns:Person.
    ?Subject a ?classSubClass.
    ?Subject ?O ?Value
  }
  ''',
  initNs = { "RDF": RDF,
            "ns" : ns,
            "RDFS" : RDFS,
            "VCARD" : VCARD
            })

# Visualize the results


lastSubject=""

for r in g.query(q1):
  if (lastSubject != r.Subject):
    print(r.Subject)
    lastSubject = r.Subject
  print(r.Value)

# RDFLib
# TO DO


def recursiveProperties(currentClass):
    for s, p, o in g.triples((None, RDF.type, currentClass)):
      print(s)
      for subj, prop, obj in g.triples((s, None, None)):
        print(obj)
    for s, p, o in g.triples((None, RDFS.subClassOf, currentClass)):
      recursiveProperties(s)

# Visualize the results

recursiveProperties(ns.Person)