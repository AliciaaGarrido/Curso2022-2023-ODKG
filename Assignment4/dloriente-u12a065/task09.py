# -*- coding: utf-8 -*-
"""Task09.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16dzFaCF8-G7xH8qoJMGdJYEjLjqMJGvT

**Task 09: Data linking**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials/"

from rdflib import Graph, Namespace, Literal, URIRef
g1 = Graph()
g2 = Graph()
g3 = Graph()
g1.parse(github_storage+"rdf/data03.rdf", format="xml")
g2.parse(github_storage+"rdf/data04.rdf", format="xml")

"""Busca individuos en los dos grafos y enlázalos mediante la propiedad OWL:sameAs, inserta estas coincidencias en g3. Consideramos dos individuos iguales si tienen el mismo apodo y nombre de familia. Ten en cuenta que las URI no tienen por qué ser iguales para un mismo individuo en los dos grafos."""

g1.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g2.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
from rdflib.namespace import RDF
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")
owl = Namespace("http://www.w3.org/2002/07/owl#")

# Visualize g1
print("\n g1:")
for subj, pred, obj in sorted(g1):
  print(subj,pred,obj)

# Visualize g2
print("\n g2:")
for subj, pred, obj in sorted(g2):
  print(subj,pred,obj)


# Query to search for individuals with 'Given' and 'Family' properties
from rdflib.plugins.sparql import prepareQuery
q9 = prepareQuery('''
  SELECT DISTINCT ?Sub ?Pre ?Obj1 ?Obj2
  WHERE { 
    ?Sub vcard:Given ?Obj1.
    ?Sub vcard:Family ?Obj2.
  }
   ''',
  initNs = {"vcard" : "http://www.w3.org/2001/vcard-rdf/3.0#"}
)

# Visualize the results in g1 and g2
print("\n Individuals with 'Given' and 'Family' properties in g1:")
for r in g1.query(q9):
#  print(r)
  print("Given:"+r.Obj1, " - Family:"+r.Obj2)

print("\n Individuals with 'Given' and 'Family' properties in g2:")
for r in g2.query(q9):
#  print(r)
  print("Given:"+r.Obj1, " - Family:"+r.Obj2)


# Find individuals with the same properties 'Given' and 'Family' in both graphs
print("\n Individuals with the same properties 'Given' and 'Family' in g1 and g2:")
for r1 in g1.query(q9):
#    print("Given:"+r1.Obj1, " - Family:"+r1.Obj2)
    q99 = prepareQuery('''
    SELECT DISTINCT ?Sub ?Obj1 ?Obj2 
    WHERE { 
      ?Sub vcard:Given ?Obj1.
      ?Sub vcard:Family ?Obj2.
      FILTER (REGEX(STR(?Obj1), "'''+ str(r1.Obj1) +'''", "i")) .
      FILTER (REGEX(STR(?Obj2), "'''+ str(r1.Obj2) +'''", "i")) .
    }
    ''',
    initNs = {"vcard" : "http://www.w3.org/2001/vcard-rdf/3.0#"}
    )
    for r2 in g2.query(q99):
#      print(r2)
      print("Given:"+r1.Obj1, " - Family:"+r1.Obj2)
      # Add match in g3
      g3.add((r1.Sub, owl.sameAs, r2.Sub))

# Visualize g3
print("\n g3:")
for subj, pred, obj in g3:
  print(subj,pred,obj)