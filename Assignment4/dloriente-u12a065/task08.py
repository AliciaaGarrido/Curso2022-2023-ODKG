# -*- coding: utf-8 -*-
"""Task08.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w2mLQJhiIQ8BTET57lL1zAItlaAdfnZq

**Task 08: Completing missing data**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials"

from rdflib import Graph, Namespace, Literal, URIRef
g1 = Graph()
g2 = Graph()
g1.parse(github_storage+"/rdf/data01.rdf", format="xml")
g2.parse(github_storage+"/rdf/data02.rdf", format="xml")

"""Tarea: lista todos los elementos de la clase Person en el primer grafo (data01.rdf) y completa los campos (given name, family name y email) que puedan faltar con los datos del segundo grafo (data02.rdf). Puedes usar consultas SPARQL o iterar el grafo, o ambas cosas."""

g1.namespace_manager.bind('ns', Namespace("http://data.org#"), override=False)
g2.namespace_manager.bind('ns', Namespace("http://data.org#"), override=False)
g2.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
from rdflib.plugins.sparql import prepareQuery
from rdflib.namespace import RDF
ns = Namespace("http://data.org#")
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")

q8 = prepareQuery('''
  SELECT DISTINCT ?Sub 
  WHERE { 
    ?Sub RDF:type ns:Person.
  }
   ''',
  initNs = { "ns" : "http://data.org#", "RDF" : RDF}
)

# Visualize g1
print("\n g1:")
for subj, pred, obj in sorted(g1):
  print(subj,pred,obj)

# Visualize g2
print("\n g2:")
for subj, pred, obj in sorted(g2):
  print(subj,pred,obj)

print("\n Individuals of 'Person' in g1:")
for r in g1.query(q8):
#  print(r)
  print(r.Sub)

print("\n Individuals of 'Person' in g2:")
for r in g2.query(q8):
#  print(r)
  print(r.Sub)

# Find the individuals of g1 that are in g2 and add their properties (Given, Family & EMAIL) in g1
print("\n Properties 'Given', 'Family' & 'EMAIL' of individuals 'Person' in g2 added in g1:")
for s,p,o in g1.triples((None, RDF.type, ns.Person)):
  for ss,pp,oo in g2.triples((s, vcard.Given, None)):
    print(ss,pp,oo)
    g1.add((ss,pp,oo))
  for ss,pp,oo in g2.triples((s, vcard.Family, None)):
    print(ss,pp,oo)
    g1.add((ss,pp,oo))
  for ss,pp,oo in g2.triples((s, vcard.EMAIL, None)):
    print(ss,pp,oo)
    g1.add((ss,pp,oo))

# Visualize g1
print("\n g1 after adding the properties listed above:")
for subj, pred, obj in sorted(g1):
  print(subj,pred,obj)