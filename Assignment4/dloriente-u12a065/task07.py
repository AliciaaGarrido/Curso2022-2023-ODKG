# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JxJ96Fqon5ZWQKmcqCx4fHoiNL2rdfRT

**Task 07: Querying RDF(s)**
"""

!pip install rdflib 
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**"""

# TO DO
# With RDFLib
print("\n7.1 List all subclasses of 'Person' with RDFLib:")
ns = Namespace("http://somewhere#")
for s,p,o in g.triples((None, RDFS.subClassOf, ns.Person)):
  print(s)

# With SPARQL
print("\n7.1 List all subclasses of 'Person' with SPARQL:")
from rdflib.plugins.sparql import prepareQuery
q71 = prepareQuery('''
  SELECT DISTINCT ?Sub 
  WHERE { 
    ?Sub RDFS:subClassOf ns:Person.
  }
   ''',
  initNs = { "ns" : "http://somewhere#", "RDFS" : RDFS}
)
# Visualize the results
for r in g.query(q71):
#  print(r)
  print(r.Sub)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
# With RDFLib
print("\n7.2 List all individuals of 'Person' with RDFLib:")
for s,p,o in g.triples((None, RDFS.subClassOf, ns.Person)):
  for ss,pp,op in g.triples((None, RDF.type, s)):
    print(ss)
for s,p,o in g.triples((None, RDF.type, ns.Person)):
  print(s)

# With SPARQL
print("\n7.2 List all individuals of 'Person' with SPARQL:")
q72 = prepareQuery('''
  SELECT DISTINCT ?Sub ?Person
  WHERE { 
    {?Person RDFS:subClassOf* ns:Person. 
    ?Sub RDF:type ?Person.} 
    UNION 
    {?Sub RDF:type ns:Person.}
  }
   ''',
  initNs = { "ns" : "http://somewhere#", "RDF" : RDF, "RDFS" : RDFS}
)
# Visualize the results
for r in g.query(q72):
#  print(r)
  print(r.Sub)

"""**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**

"""

# TO DO
# With RDFLib
print("\n7.3 List all individuals of 'Person' and all their properties including their class with RDFLib:")
# Create a new graph g73
g73 = Graph()
g73.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
# Add to g73 all individuals of the different subclasses of 'Person'
for s,p,o in g.triples((None, RDFS.subClassOf, ns.Person)):
  for ss,pp,oo in g.triples((None, RDF.type, s)):
    g73.add((ss,pp,oo))
# Add to g73 all individuals of 'Person'
for s,p,o in g.triples((None, RDF.type, ns.Person)):
  g73.add((s,p,o))
# Visualize the results: show all properties of individuals in g73
for s,p,o in g73:
  for ss,pp,oo in sorted(g.triples((s, None, None))):
    print(ss,pp,oo)


# With SPARQL
print("\n7.3 List all individuals of 'Person' and all their properties including their class with SPARQL:")
q73 = prepareQuery('''
  SELECT DISTINCT ?Sub ?p ?o 
  WHERE {
    {?Person RDFS:subClassOf* ns:Person. 
    ?Sub RDF:type ?Person. 
    ?Sub ?p ?o .}
    UNION 
    {?Sub RDF:type ns:Person. 
    ?Sub ?p ?o .}
  }
   ''',
  initNs = { "ns" : "http://somewhere#" , "RDF" : RDF, "RDFS" : RDFS}
)
# Visualize the results
for s, p, o in sorted(g.query(q73)):
  print(s,p,o)
#for r in sorted(g.query(q73)):
#  print(r)