# -*- coding: utf-8 -*-
"""Task09.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aA_7cDJnS46kKnLS5uuCGN5_s3QANqk-

**Task 09: Data linking**
"""

github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2020-2021/master/Assignment4/"

from rdflib import Graph, Namespace, Literal, URIRef
from rdflib.namespace import RDF, RDFS, OWL
g1 = Graph()
g2 = Graph()
g3 = Graph()
g1.parse(github_storage+"resources/data03.rdf", format="xml")
g2.parse(github_storage+"resources/data04.rdf", format="xml")

"""Busca individuos en los dos grafos y enlázalos mediante la propiedad OWL:sameAs, inserta estas coincidencias en g3. Consideramos dos individuos iguales si tienen el mismo apodo y nombre de familia. Ten en cuenta que las URI no tienen por qué ser iguales para un mismo individuo en los dos grafos."""

ns1=Namespace("http://data.three.org#")
ns2=Namespace("http://data.four.org#")
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")

for s1,p1,o1 in g1.triples((None, RDF.type , ns1.Person)):
    for s2,p2,o2 in g2.triples((None, RDF.type , ns2.Person)):
        given1=None
        given2=None
        family1=None
        family2=None
        for _,_,o3 in g1.triples((s1, vcard.Given, None)):
            given1=o3
        for _,_,o3 in g2.triples((s2, vcard.Given, None)):
            given2=o3
        for _,_,o3 in g1.triples((s1, vcard.Family, None)):
            family1=o3
        for _,_,o3 in g2.triples((s2, vcard.Family, None)):
            family2=o3
        if given1==given2 and family1==family2 :
            g3.add((s1,OWL.sameAs,s2))

print("g1 families and givens")
for s,p,o in g1.triples((None,RDF.type,ns1.Person)):
    for s1,p1,o1 in g1.triples((s, vcard.Given, None)):
        print(s1,p1,o1)
    for s1,p1,o1 in g1.triples((s, vcard.Family, None)):
        print(s1,p1,o1)

print("\ng1 families and givens")
for s,p,o in g2.triples((None,RDF.type,ns2.Person)):
    for s1,p1,o1 in g2.triples((s, vcard.Given, None)):
        print(s1,p1,o1)
    for s1,p1,o1 in g2.triples((s, vcard.Family, None)):
        print(s1,p1,o1)

print("\nsameAs in g3")
for s,p,o in g3.triples((None,None,None)):
    print(s,p,o)
